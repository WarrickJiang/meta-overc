nsenter to be more flexible

Can use nsenter to launch peer or nesting containers.  In order to
support this, the following is added:

* Extend "--target" option to optionally accept the full path to process
  proc file.  This allows nsenter to use procfs mount at different
  location than /proc.

* Add "-b" option to basically bind mount provided source path "src" to
  provided destination path "dest".  This helps to set the correct cgroup
  for lxc containers.

Signed-off-by: Vu Tran <vu.tran@windriver.com>

diff --git a/sys-utils/nsenter.c b/sys-utils/nsenter.c
index d8690db367ea..a65341e5589b 100644
--- a/sys-utils/nsenter.c
+++ b/sys-utils/nsenter.c
@@ -28,6 +28,7 @@
 #include <assert.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <sys/mount.h>
 #include <grp.h>
 
 #ifdef HAVE_LIBSELINUX
@@ -41,6 +42,8 @@
 #include "namespace.h"
 #include "exec_shell.h"
 
+#define BIND_MOUNT_MAPS_SIZE 10
+
 static struct namespace_file {
 	int nstype;
 	const char *name;
@@ -74,7 +77,9 @@ static void usage(int status)
 	fputs(_("Run a program with namespaces of other processes.\n"), out);
 
 	fputs(USAGE_OPTIONS, out);
-	fputs(_(" -t, --target <pid>     target process to get namespaces from\n"), out);
+	fputs(_(" -t, --target <pid>|<path>/<pid>\n"), out);
+	fputs(_("                        target process to get namespaces from. If <path>\n"), out);
+	fputs(_("                        is not provided then use /proc/<pid>\n"), out);
 	fputs(_(" -m, --mount[=<file>]   enter mount namespace\n"), out);
 	fputs(_(" -u, --uts[=<file>]     enter UTS namespace (hostname etc)\n"), out);
 	fputs(_(" -i, --ipc[=<file>]     enter System V IPC namespace\n"), out);
@@ -91,6 +96,8 @@ static void usage(int status)
 #ifdef HAVE_LIBSELINUX
 	fputs(_(" -Z, --follow-context   set SELinux context according to --target PID\n"), out);
 #endif
+	fputs(_(" -b,     <src>:<dest>   bind mount src to dest.\n"), out);
+	fprintf(out, _("                        This option can be invoked %d times\n"), BIND_MOUNT_MAPS_SIZE);
 
 	fputs(USAGE_SEPARATOR, out);
 	fputs(USAGE_HELP, out);
@@ -100,7 +107,9 @@ static void usage(int status)
 	exit(status);
 }
 
-static pid_t namespace_target_pid = 0;
+static char *bind_mount_maps[BIND_MOUNT_MAPS_SIZE][2];
+static int bind_mount_maps_free_slot_index = 0;
+static char namespace_target_pid_path[PATH_MAX] = {'\0'};
 static int root_fd = -1;
 static int wd_fd = -1;
 
@@ -108,9 +117,9 @@ static void open_target_fd(int *fd, const char *type, const char *path)
 {
 	char pathbuf[PATH_MAX];
 
-	if (!path && namespace_target_pid) {
-		snprintf(pathbuf, sizeof(pathbuf), "/proc/%u/%s",
-			 namespace_target_pid, type);
+	if (!path && strlen(namespace_target_pid_path)) {
+		snprintf(pathbuf, sizeof(pathbuf), "%s/%s",
+			 namespace_target_pid_path, type);
 		path = pathbuf;
 	}
 	if (!path)
@@ -202,7 +211,7 @@ int main(int argc, char *argv[])
 	};
 
 	struct namespace_file *nsfile;
-	int c, namespaces = 0, setgroups_nerrs = 0, preserve_cred = 0;
+	int c, namespaces = 0, setgroups_nerrs = 0, preserve_cred = 0, i, j;
 	bool do_rd = false, do_wd = false, force_uid = false, force_gid = false;
 	int do_fork = -1; /* unknown yet */
 	uid_t uid = 0;
@@ -210,14 +219,16 @@ int main(int argc, char *argv[])
 #ifdef HAVE_LIBSELINUX
 	bool selinux = 0;
 #endif
+	char *token, *saveptr, *str, *end = NULL;
 
 	setlocale(LC_ALL, "");
 	bindtextdomain(PACKAGE, LOCALEDIR);
 	textdomain(PACKAGE);
 	atexit(close_stdout);
+	memset(bind_mount_maps, 0, sizeof(bind_mount_maps));
 
 	while ((c =
-		getopt_long(argc, argv, "+hVt:m::u::i::n::p::C::U::S:G:r::w::FZ",
+		getopt_long(argc, argv, "+hVt:m::u::i::n::p::C::U::S:G:r::w::FZb:",
 			    longopts, NULL)) != -1) {
 		switch (c) {
 		case 'h':
@@ -226,8 +237,17 @@ int main(int argc, char *argv[])
 			printf(UTIL_LINUX_VERSION);
 			return EXIT_SUCCESS;
 		case 't':
-			namespace_target_pid =
-			    strtoul_or_err(optarg, _("failed to parse pid"));
+			/* The optarg passed with -t option can either be number pid or absolute
+			   path to pid within procfs.  First try to determine if it is a pid.
+			   For example: with "-t 1234", namespace_target_pid_path is "/proc/1234",
+			   with "-t /host/proc/1234", namespace_target_pid_path is "/host/proc/1234" */
+			errno = 0;
+			strtoul(optarg, &end, 10);
+			if (errno || optarg == end || (end && *end))
+				/* it is not pid */
+				strncpy(namespace_target_pid_path, optarg, sizeof(namespace_target_pid_path));
+			else
+				snprintf(namespace_target_pid_path, sizeof(namespace_target_pid_path), "/proc/%s", optarg);
 			break;
 		case 'm':
 			if (optarg)
@@ -302,6 +322,18 @@ int main(int argc, char *argv[])
 			selinux = 1;
 			break;
 #endif
+		case 'b':
+			if (bind_mount_maps_free_slot_index >= BIND_MOUNT_MAPS_SIZE)
+				break;
+			for (i = 0, str = optarg; i < 2; i++, str = NULL) {
+				token = strtok_r(str, ":", &saveptr);
+				if (token == NULL)
+					break;
+				bind_mount_maps[bind_mount_maps_free_slot_index][i] = token;
+			}
+			if (i == 1)
+				bind_mount_maps_free_slot_index++;
+			break;
 		default:
 			usage(EXIT_FAILURE);
 		}
@@ -399,6 +431,20 @@ int main(int argc, char *argv[])
 		wd_fd = -1;
 	}
 
+	for (i = 0, j = 0; i < BIND_MOUNT_MAPS_SIZE; i++) {
+		int ret;
+		if (bind_mount_maps[i][0] != 0 && bind_mount_maps[i][1] != 0) {
+			/* Run unshare() only once */
+			if (!j) {
+				unshare(CLONE_NEWNS);
+				j++;
+			}
+			if (mount(bind_mount_maps[i][0], bind_mount_maps[i][1], "", MS_BIND, 0))
+				err(EXIT_FAILURE,
+				    _("fail to bind mount src=%s, dest=%s"), bind_mount_maps[i][0], bind_mount_maps[i][1]);
+		}
+	}
+
 	if (do_fork == 1)
 		continue_as_child();
 
